<div class="container mt-5 mb-5">
  <h1 class="mb-4">Checkout</h1>

  <% if @cart_items.any? %>
    <div class="row mb-3">
      <div class="col">
        <table class="table">
          <thead>
            <tr>
              <th scope="col">Product</th>
              <th scope="col">Quantity</th>
              <th scope="col">Price</th>
              <th scope="col">Remove</th>
            </tr>
          </thead>
          <tbody>
            <% @cart_items.group_by(&:product).each do |product, items| %>

              <tr id="cart-item-<%= items.first.id %>">
                <td><%= product.product_name %></td>
                <td>
                  <%= form_with model: items.first, url: cart_item_path(items.first), method: :patch, remote: true, html: { class: 'update-cart-item', data: { controller: 'cart', action: 'change->cart#update' } } do |f| %>
                    <%= f.number_field :quantity, value: items.sum(&:quantity), min: 1, class: 'form-control quantity-field', data: { target: 'cart.quantity' } %>
                    <%= f.hidden_field :product_id, value: product.id %>
                  <% end %>

                </td>
                <td id="product-total-<%= product.id %>"><%= number_to_currency(product.price * items.sum(&:quantity)) %></td>
                <td>
                  <%= link_to 'Remove', cart_item_path(items.first), method: :delete, remote: true, data: { confirm: 'Are you sure?' }, class: 'btn btn-danger' %>

              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
    <div class="row mb-3">
      <div class="col">
        <p id="cart-total">Total: <%= number_to_currency(@cart.total_price) %></p>
      </div>
    </div>
  <% else %>
    <p>Your cart is empty.</p>
  <% end %>


  <%= form_for @order do |f| %>
    <% if current_user && current_user.default_address.present? %>
      <div class="form-check mb-3">
        <%= f.check_box :use_default_address, class: 'form-check-input', id: 'use_default_address' %>
        <%= label_tag 'use_default_address', 'Use default address', class: 'form-check-label' %>
      </div>
      <div id="default-address">
        <p><%= current_user.default_address %>, <%= current_user.default_city %>, <%= current_user.default_state %>, <%= current_user.default_country %>,<%= current_user.default_postcode %> </p>
      </div>
    <% end %>

    <div id="new-address-fields" <%= current_user && current_user.default_address.present? ? 'style="display: none;"' : '' %>>
      <div class="mb-3">
        <%= f.label :shipping_address, 'Shipping Address' %>
        <%= f.text_field :shipping_address, class: 'form-control' %>
      </div>
      <!-- Add similar fields for city, state, country, and postal code -->
      <div class="mb-3">
        <%= f.label :shipping_city, 'Shipping City' %>
        <%= f.text_field :shipping_city, class: 'form-control' %>
      </div>
      <div class="mb-3">
        <%= f.label :shipping_state, 'Shipping State' %>
        <%= f.text_field :shipping_state, class: 'form-control' %>
      </div>
      <div class="mb-3">
        <%= f.label :shipping_country, 'Shipping Country' %>
        <%= f.text_field :shipping_country, class: 'form-control' %>
      </div>
      <div class="mb-3">
        <%= f.label :shipping_postcode, 'Shipping Post Code' %>
        <%= f.text_field :shipping_postcode, class: 'form-control' %>
      </div>
    </div>

    <div class="actions">
      <%= f.submit 'Place Order', class: 'btn btn-primary' %>
    </div>
  <% end %>
</div>

<!-- Include jQuery or your preferred way to handle the DOM manipulation -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var useDefaultAddressCheckbox = document.getElementById('use_default_address');
    var defaultAddressDiv = document.getElementById('default-address');
    var newAddressFields = document.getElementById('new-address-fields');

    useDefaultAddressCheckbox.addEventListener('change', function() {
      if (this.checked) {
        newAddressFields.style.display = 'none';
        defaultAddressDiv.style.display = 'block';
      } else {
        newAddressFields.style.display = 'block';
        defaultAddressDiv.style.display = 'none';
      }
    });

    // Event listener for form submission
    var formElements = document.querySelectorAll('form.update-cart-item');
    formElements.forEach(function(formElement) {
      formElement.addEventListener('submit', function(event) {
        event.preventDefault();
        fetch(event.target.action, {
          method: 'PATCH',
          body: new FormData(event.target),
          headers: {
            'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute("content"),
            'Accept': 'application/json',
          }
        }).then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        }).then(data => {
          updateDOMWithNewData(data);
        }).catch(error => {
          console.log('Update failed', error);
        });
      });
    });
  });

  // Define the function to update the DOM with new data
function updateDOMWithNewData(data) {
  // Update the individual product total price
  document.getElementById(`product-total-${data.product_id}`).textContent = data.product_total;
  // Update the cart total price
  document.getElementById('cart-total').textContent = `Total: ${data.cart_total}`;
  // Other DOM updates as necessary...
}

// Attach event listeners when the DOM content is fully loaded
document.addEventListener('DOMContentLoaded', function() {
  // Set event listeners on each update-cart-item form
  document.querySelectorAll('form.update-cart-item').forEach(function(form) {
    form.addEventListener('change', function(event) { // Assuming 'change' event triggers the update
      event.preventDefault();
      fetch(event.target.action, {
        method: 'PATCH',
        body: new FormData(event.target),
        headers: {
          'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute("content"),
          'Accept': 'application/json',
        }
      }).then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      }).then(data => {
        updateDOMWithNewData(data); // Call this function with the response data
      }).catch(error => {
        console.log('Update failed', error);
      });
    });
  });
});

</script>
